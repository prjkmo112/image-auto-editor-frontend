/* tslint:disable */
/* eslint-disable */
/**
 * Image Auto Editor API
 * 이미지 자동 편집을 위한 REST API 서비스
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { HTTPValidationError } from '../models';
import { TargetImageListResponse } from '../models';
import { TargetImageResponse } from '../models';
/**
 * TargetImagesApi - axios parameter creator
 * @export
 */
export const TargetImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 제거 대상 이미지 등록
         * @summary Create Target Image
         * @param {any} tags 
         * @param {any} file 
         * @param {any} name 
         * @param {any} [isActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTargetImageApiTargetImagesRegisterPostForm: async (tags: any, file: any, name: any, isActive?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tags' is not null or undefined
            if (tags === null || tags === undefined) {
                throw new RequiredError('tags','Required parameter tags was null or undefined when calling createTargetImageApiTargetImagesRegisterPostForm.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling createTargetImageApiTargetImagesRegisterPostForm.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling createTargetImageApiTargetImagesRegisterPostForm.');
            }
            const localVarPath = `/api/target-images/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }


            if (tags !== undefined) { 
                localVarFormParams.append('tags', tags as any);
            }

            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 이미지 삭제
         * @summary Delete Target Image
         * @param {TargetImageResponse} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTargetImageApiTargetImagesImageIdDelete: async (body: TargetImageResponse, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling deleteTargetImageApiTargetImagesImageIdDelete.');
            }
            const localVarPath = `/api/target-images/{image_id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 목록 조회
         * @summary Get Target Images List
         * @param {any} [page] 페이지 번호
         * @param {any} [size] 페이지 크기
         * @param {any} [activeOnly] 활성 이미지만 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetImagesListApiTargetImagesListGet: async (page?: any, size?: any, activeOnly?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/target-images/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (activeOnly !== undefined) {
                localVarQueryParameter['active_only'] = activeOnly;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 이미지 수정
         * @summary Update Target Image
         * @param {TargetImageResponse} image 
         * @param {any} name 
         * @param {any} tags 
         * @param {any} isActive 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTargetImageApiTargetImagesImageIdPutForm: async (image: TargetImageResponse, name: any, tags: any, isActive: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'image' is not null or undefined
            if (image === null || image === undefined) {
                throw new RequiredError('image','Required parameter image was null or undefined when calling updateTargetImageApiTargetImagesImageIdPutForm.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling updateTargetImageApiTargetImagesImageIdPutForm.');
            }
            // verify required parameter 'tags' is not null or undefined
            if (tags === null || tags === undefined) {
                throw new RequiredError('tags','Required parameter tags was null or undefined when calling updateTargetImageApiTargetImagesImageIdPutForm.');
            }
            // verify required parameter 'isActive' is not null or undefined
            if (isActive === null || isActive === undefined) {
                throw new RequiredError('isActive','Required parameter isActive was null or undefined when calling updateTargetImageApiTargetImagesImageIdPutForm.');
            }
            const localVarPath = `/api/target-images/{image_id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (image !== undefined) { 
                localVarFormParams.set('image', image as any);
            }

            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }

            if (tags !== undefined) { 
                localVarFormParams.set('tags', tags as any);
            }

            if (isActive !== undefined) { 
                localVarFormParams.set('is_active', isActive as any);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TargetImagesApi - functional programming interface
 * @export
 */
export const TargetImagesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 제거 대상 이미지 등록
         * @summary Create Target Image
         * @param {any} tags 
         * @param {any} file 
         * @param {any} name 
         * @param {any} [isActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTargetImageApiTargetImagesRegisterPostForm(tags: any, file: any, name: any, isActive?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await TargetImagesApiAxiosParamCreator(configuration).createTargetImageApiTargetImagesRegisterPostForm(tags, file, name, isActive, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 이미지 삭제
         * @summary Delete Target Image
         * @param {TargetImageResponse} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTargetImageApiTargetImagesImageIdDelete(body: TargetImageResponse, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await TargetImagesApiAxiosParamCreator(configuration).deleteTargetImageApiTargetImagesImageIdDelete(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 목록 조회
         * @summary Get Target Images List
         * @param {any} [page] 페이지 번호
         * @param {any} [size] 페이지 크기
         * @param {any} [activeOnly] 활성 이미지만 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargetImagesListApiTargetImagesListGet(page?: any, size?: any, activeOnly?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TargetImageListResponse>>> {
            const localVarAxiosArgs = await TargetImagesApiAxiosParamCreator(configuration).getTargetImagesListApiTargetImagesListGet(page, size, activeOnly, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 이미지 수정
         * @summary Update Target Image
         * @param {TargetImageResponse} image 
         * @param {any} name 
         * @param {any} tags 
         * @param {any} isActive 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTargetImageApiTargetImagesImageIdPutForm(image: TargetImageResponse, name: any, tags: any, isActive: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await TargetImagesApiAxiosParamCreator(configuration).updateTargetImageApiTargetImagesImageIdPutForm(image, name, tags, isActive, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TargetImagesApi - factory interface
 * @export
 */
export const TargetImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 제거 대상 이미지 등록
         * @summary Create Target Image
         * @param {any} tags 
         * @param {any} file 
         * @param {any} name 
         * @param {any} [isActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTargetImageApiTargetImagesRegisterPostForm(tags: any, file: any, name: any, isActive?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return TargetImagesApiFp(configuration).createTargetImageApiTargetImagesRegisterPostForm(tags, file, name, isActive, options).then((request) => request(axios, basePath));
        },
        /**
         * 이미지 삭제
         * @summary Delete Target Image
         * @param {TargetImageResponse} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTargetImageApiTargetImagesImageIdDelete(body: TargetImageResponse, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return TargetImagesApiFp(configuration).deleteTargetImageApiTargetImagesImageIdDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 목록 조회
         * @summary Get Target Images List
         * @param {any} [page] 페이지 번호
         * @param {any} [size] 페이지 크기
         * @param {any} [activeOnly] 활성 이미지만 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargetImagesListApiTargetImagesListGet(page?: any, size?: any, activeOnly?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<TargetImageListResponse>> {
            return TargetImagesApiFp(configuration).getTargetImagesListApiTargetImagesListGet(page, size, activeOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * 이미지 수정
         * @summary Update Target Image
         * @param {TargetImageResponse} image 
         * @param {any} name 
         * @param {any} tags 
         * @param {any} isActive 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTargetImageApiTargetImagesImageIdPutForm(image: TargetImageResponse, name: any, tags: any, isActive: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return TargetImagesApiFp(configuration).updateTargetImageApiTargetImagesImageIdPutForm(image, name, tags, isActive, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TargetImagesApi - object-oriented interface
 * @export
 * @class TargetImagesApi
 * @extends {BaseAPI}
 */
export class TargetImagesApi extends BaseAPI {
    /**
     * 제거 대상 이미지 등록
     * @summary Create Target Image
     * @param {any} tags 
     * @param {any} file 
     * @param {any} name 
     * @param {any} [isActive] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetImagesApi
     */
    public async createTargetImageApiTargetImagesRegisterPostForm(tags: any, file: any, name: any, isActive?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return TargetImagesApiFp(this.configuration).createTargetImageApiTargetImagesRegisterPostForm(tags, file, name, isActive, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 이미지 삭제
     * @summary Delete Target Image
     * @param {TargetImageResponse} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetImagesApi
     */
    public async deleteTargetImageApiTargetImagesImageIdDelete(body: TargetImageResponse, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return TargetImagesApiFp(this.configuration).deleteTargetImageApiTargetImagesImageIdDelete(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 목록 조회
     * @summary Get Target Images List
     * @param {any} [page] 페이지 번호
     * @param {any} [size] 페이지 크기
     * @param {any} [activeOnly] 활성 이미지만 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetImagesApi
     */
    public async getTargetImagesListApiTargetImagesListGet(page?: any, size?: any, activeOnly?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<TargetImageListResponse>> {
        return TargetImagesApiFp(this.configuration).getTargetImagesListApiTargetImagesListGet(page, size, activeOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 이미지 수정
     * @summary Update Target Image
     * @param {TargetImageResponse} image 
     * @param {any} name 
     * @param {any} tags 
     * @param {any} isActive 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetImagesApi
     */
    public async updateTargetImageApiTargetImagesImageIdPutForm(image: TargetImageResponse, name: any, tags: any, isActive: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return TargetImagesApiFp(this.configuration).updateTargetImageApiTargetImagesImageIdPutForm(image, name, tags, isActive, options).then((request) => request(this.axios, this.basePath));
    }
}
