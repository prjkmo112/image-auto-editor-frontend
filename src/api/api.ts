/* tslint:disable */
/* eslint-disable */
/**
 * Image Auto Editor API
 * 이미지 자동 편집을 위한 REST API 서비스
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface TargetImageListResponse
 */
export interface TargetImageListResponse {
    /**
     * 
     * @type {Array<TargetImageResponse>}
     * @memberof TargetImageListResponse
     */
    'items': Array<TargetImageResponse>;
    /**
     * 
     * @type {number}
     * @memberof TargetImageListResponse
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof TargetImageListResponse
     */
    'cnt': number;
}
/**
 * 
 * @export
 * @interface TargetImageResponse
 */
export interface TargetImageResponse {
    /**
     * 
     * @type {number}
     * @memberof TargetImageResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof TargetImageResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TargetImageResponse
     */
    'url_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TargetImageResponse
     */
    'file_path': string;
    /**
     * 
     * @type {number}
     * @memberof TargetImageResponse
     */
    'file_size': number;
    /**
     * 
     * @type {string}
     * @memberof TargetImageResponse
     */
    'mime_type': string;
    /**
     * 
     * @type {boolean}
     * @memberof TargetImageResponse
     */
    'is_active': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof TargetImageResponse
     */
    'tags'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof TargetImageResponse
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof TargetImageResponse
     */
    'file_path_type'?: string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckHealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckHealthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthCheckHealthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.healthCheckHealthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    healthCheckHealthGet(options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    rootGet(options?: RawAxiosRequestConfig): AxiosPromise<any>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheckHealthGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheckHealthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ImageApi - axios parameter creator
 * @export
 */
export const ImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Image
         * @param {string} imageId 
         * @param {number} [blur] 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageApiImageTargetImageIdGet: async (imageId: string, blur?: number, width?: number, height?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('getImageApiImageTargetImageIdGet', 'imageId', imageId)
            const localVarPath = `/api/image/target/{image_id}`
                .replace(`{${"image_id"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Marked Image
         * @param {string} imageId 
         * @param {number} [blur] 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarkedImageApiImageMarkedImageIdGet: async (imageId: string, blur?: number, width?: number, height?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('getMarkedImageApiImageMarkedImageIdGet', 'imageId', imageId)
            const localVarPath = `/api/image/marked/{image_id}`
                .replace(`{${"image_id"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Sliced Image
         * @param {string} imageId 
         * @param {number} [blur] 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSlicedImageApiImageSlicedImageIdGet: async (imageId: string, blur?: number, width?: number, height?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('getSlicedImageApiImageSlicedImageIdGet', 'imageId', imageId)
            const localVarPath = `/api/image/sliced/{image_id}`
                .replace(`{${"image_id"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageApi - functional programming interface
 * @export
 */
export const ImageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Image
         * @param {string} imageId 
         * @param {number} [blur] 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageApiImageTargetImageIdGet(imageId: string, blur?: number, width?: number, height?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageApiImageTargetImageIdGet(imageId, blur, width, height, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.getImageApiImageTargetImageIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Marked Image
         * @param {string} imageId 
         * @param {number} [blur] 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMarkedImageApiImageMarkedImageIdGet(imageId: string, blur?: number, width?: number, height?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMarkedImageApiImageMarkedImageIdGet(imageId, blur, width, height, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.getMarkedImageApiImageMarkedImageIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Sliced Image
         * @param {string} imageId 
         * @param {number} [blur] 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSlicedImageApiImageSlicedImageIdGet(imageId: string, blur?: number, width?: number, height?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSlicedImageApiImageSlicedImageIdGet(imageId, blur, width, height, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.getSlicedImageApiImageSlicedImageIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ImageApi - factory interface
 * @export
 */
export const ImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImageApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Image
         * @param {string} imageId 
         * @param {number} [blur] 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageApiImageTargetImageIdGet(imageId: string, blur?: number, width?: number, height?: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getImageApiImageTargetImageIdGet(imageId, blur, width, height, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Marked Image
         * @param {string} imageId 
         * @param {number} [blur] 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarkedImageApiImageMarkedImageIdGet(imageId: string, blur?: number, width?: number, height?: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getMarkedImageApiImageMarkedImageIdGet(imageId, blur, width, height, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Sliced Image
         * @param {string} imageId 
         * @param {number} [blur] 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSlicedImageApiImageSlicedImageIdGet(imageId: string, blur?: number, width?: number, height?: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getSlicedImageApiImageSlicedImageIdGet(imageId, blur, width, height, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImageApi - interface
 * @export
 * @interface ImageApi
 */
export interface ImageApiInterface {
    /**
     * 
     * @summary Get Image
     * @param {string} imageId 
     * @param {number} [blur] 
     * @param {number} [width] 
     * @param {number} [height] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    getImageApiImageTargetImageIdGet(imageId: string, blur?: number, width?: number, height?: number, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Marked Image
     * @param {string} imageId 
     * @param {number} [blur] 
     * @param {number} [width] 
     * @param {number} [height] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    getMarkedImageApiImageMarkedImageIdGet(imageId: string, blur?: number, width?: number, height?: number, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Sliced Image
     * @param {string} imageId 
     * @param {number} [blur] 
     * @param {number} [width] 
     * @param {number} [height] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    getSlicedImageApiImageSlicedImageIdGet(imageId: string, blur?: number, width?: number, height?: number, options?: RawAxiosRequestConfig): AxiosPromise<any>;

}

/**
 * ImageApi - object-oriented interface
 * @export
 * @class ImageApi
 * @extends {BaseAPI}
 */
export class ImageApi extends BaseAPI implements ImageApiInterface {
    /**
     * 
     * @summary Get Image
     * @param {string} imageId 
     * @param {number} [blur] 
     * @param {number} [width] 
     * @param {number} [height] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getImageApiImageTargetImageIdGet(imageId: string, blur?: number, width?: number, height?: number, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).getImageApiImageTargetImageIdGet(imageId, blur, width, height, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Marked Image
     * @param {string} imageId 
     * @param {number} [blur] 
     * @param {number} [width] 
     * @param {number} [height] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getMarkedImageApiImageMarkedImageIdGet(imageId: string, blur?: number, width?: number, height?: number, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).getMarkedImageApiImageMarkedImageIdGet(imageId, blur, width, height, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Sliced Image
     * @param {string} imageId 
     * @param {number} [blur] 
     * @param {number} [width] 
     * @param {number} [height] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getSlicedImageApiImageSlicedImageIdGet(imageId: string, blur?: number, width?: number, height?: number, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).getSlicedImageApiImageSlicedImageIdGet(imageId, blur, width, height, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProcImageApi - axios parameter creator
 * @export
 */
export const ProcImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * image proc
         * @summary Proc Image
         * @param {string} tags 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        procImageApiProcImagesRemovePost: async (tags: string, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tags' is not null or undefined
            assertParamExists('procImageApiProcImagesRemovePost', 'tags', tags)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('procImageApiProcImagesRemovePost', 'file', file)
            const localVarPath = `/api/proc-images/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProcImageApi - functional programming interface
 * @export
 */
export const ProcImageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProcImageApiAxiosParamCreator(configuration)
    return {
        /**
         * image proc
         * @summary Proc Image
         * @param {string} tags 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async procImageApiProcImagesRemovePost(tags: string, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.procImageApiProcImagesRemovePost(tags, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcImageApi.procImageApiProcImagesRemovePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProcImageApi - factory interface
 * @export
 */
export const ProcImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProcImageApiFp(configuration)
    return {
        /**
         * image proc
         * @summary Proc Image
         * @param {string} tags 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        procImageApiProcImagesRemovePost(tags: string, file: File, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.procImageApiProcImagesRemovePost(tags, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProcImageApi - interface
 * @export
 * @interface ProcImageApi
 */
export interface ProcImageApiInterface {
    /**
     * image proc
     * @summary Proc Image
     * @param {string} tags 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcImageApiInterface
     */
    procImageApiProcImagesRemovePost(tags: string, file: File, options?: RawAxiosRequestConfig): AxiosPromise<any>;

}

/**
 * ProcImageApi - object-oriented interface
 * @export
 * @class ProcImageApi
 * @extends {BaseAPI}
 */
export class ProcImageApi extends BaseAPI implements ProcImageApiInterface {
    /**
     * image proc
     * @summary Proc Image
     * @param {string} tags 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcImageApi
     */
    public procImageApiProcImagesRemovePost(tags: string, file: File, options?: RawAxiosRequestConfig) {
        return ProcImageApiFp(this.configuration).procImageApiProcImagesRemovePost(tags, file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TargetImagesApi - axios parameter creator
 * @export
 */
export const TargetImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 제거 대상 이미지 등록
         * @summary Create Target Image
         * @param {string} name 
         * @param {string} tags 
         * @param {File} file 
         * @param {boolean} [isActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTargetImageApiTargetImagesRegisterPost: async (name: string, tags: string, file: File, isActive?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createTargetImageApiTargetImagesRegisterPost', 'name', name)
            // verify required parameter 'tags' is not null or undefined
            assertParamExists('createTargetImageApiTargetImagesRegisterPost', 'tags', tags)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createTargetImageApiTargetImagesRegisterPost', 'file', file)
            const localVarPath = `/api/target-images/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 목록 조회
         * @summary Get Target Images List
         * @param {number} [page] 페이지 번호
         * @param {number} [size] 페이지 크기
         * @param {boolean} [activeOnly] 활성 이미지만 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetImagesListApiTargetImagesListGet: async (page?: number, size?: number, activeOnly?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/target-images/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (activeOnly !== undefined) {
                localVarQueryParameter['active_only'] = activeOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TargetImagesApi - functional programming interface
 * @export
 */
export const TargetImagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TargetImagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 제거 대상 이미지 등록
         * @summary Create Target Image
         * @param {string} name 
         * @param {string} tags 
         * @param {File} file 
         * @param {boolean} [isActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTargetImageApiTargetImagesRegisterPost(name: string, tags: string, file: File, isActive?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTargetImageApiTargetImagesRegisterPost(name, tags, file, isActive, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TargetImagesApi.createTargetImageApiTargetImagesRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 목록 조회
         * @summary Get Target Images List
         * @param {number} [page] 페이지 번호
         * @param {number} [size] 페이지 크기
         * @param {boolean} [activeOnly] 활성 이미지만 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargetImagesListApiTargetImagesListGet(page?: number, size?: number, activeOnly?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetImageListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTargetImagesListApiTargetImagesListGet(page, size, activeOnly, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TargetImagesApi.getTargetImagesListApiTargetImagesListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TargetImagesApi - factory interface
 * @export
 */
export const TargetImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TargetImagesApiFp(configuration)
    return {
        /**
         * 제거 대상 이미지 등록
         * @summary Create Target Image
         * @param {string} name 
         * @param {string} tags 
         * @param {File} file 
         * @param {boolean} [isActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTargetImageApiTargetImagesRegisterPost(name: string, tags: string, file: File, isActive?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.createTargetImageApiTargetImagesRegisterPost(name, tags, file, isActive, options).then((request) => request(axios, basePath));
        },
        /**
         * 목록 조회
         * @summary Get Target Images List
         * @param {number} [page] 페이지 번호
         * @param {number} [size] 페이지 크기
         * @param {boolean} [activeOnly] 활성 이미지만 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetImagesListApiTargetImagesListGet(page?: number, size?: number, activeOnly?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<TargetImageListResponse> {
            return localVarFp.getTargetImagesListApiTargetImagesListGet(page, size, activeOnly, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TargetImagesApi - interface
 * @export
 * @interface TargetImagesApi
 */
export interface TargetImagesApiInterface {
    /**
     * 제거 대상 이미지 등록
     * @summary Create Target Image
     * @param {string} name 
     * @param {string} tags 
     * @param {File} file 
     * @param {boolean} [isActive] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetImagesApiInterface
     */
    createTargetImageApiTargetImagesRegisterPost(name: string, tags: string, file: File, isActive?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * 목록 조회
     * @summary Get Target Images List
     * @param {number} [page] 페이지 번호
     * @param {number} [size] 페이지 크기
     * @param {boolean} [activeOnly] 활성 이미지만 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetImagesApiInterface
     */
    getTargetImagesListApiTargetImagesListGet(page?: number, size?: number, activeOnly?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<TargetImageListResponse>;

}

/**
 * TargetImagesApi - object-oriented interface
 * @export
 * @class TargetImagesApi
 * @extends {BaseAPI}
 */
export class TargetImagesApi extends BaseAPI implements TargetImagesApiInterface {
    /**
     * 제거 대상 이미지 등록
     * @summary Create Target Image
     * @param {string} name 
     * @param {string} tags 
     * @param {File} file 
     * @param {boolean} [isActive] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetImagesApi
     */
    public createTargetImageApiTargetImagesRegisterPost(name: string, tags: string, file: File, isActive?: boolean, options?: RawAxiosRequestConfig) {
        return TargetImagesApiFp(this.configuration).createTargetImageApiTargetImagesRegisterPost(name, tags, file, isActive, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 목록 조회
     * @summary Get Target Images List
     * @param {number} [page] 페이지 번호
     * @param {number} [size] 페이지 크기
     * @param {boolean} [activeOnly] 활성 이미지만 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetImagesApi
     */
    public getTargetImagesListApiTargetImagesListGet(page?: number, size?: number, activeOnly?: boolean, options?: RawAxiosRequestConfig) {
        return TargetImagesApiFp(this.configuration).getTargetImagesListApiTargetImagesListGet(page, size, activeOnly, options).then((request) => request(this.axios, this.basePath));
    }
}



